f1 :: Int -> [Int]
f2 :: Int -> [Int]
f3 :: Int -> [Int]
f4 :: Int -> [Int]
f5 :: Int -> [Int]
f6 :: Int -> [Int]
f7 :: Int -> [Int]
f8 :: Int -> [Int]


f1 0 = []
f1 n = [1 .. n]

f2 0 = []
f2 1 = [1]
f2 n = [1, 3 .. 2*n]

f3 0 = []
f3 1 = [2]
f3 n = [2, 4 .. 2*n]

f4 0 = []
f4 n = [i*i | i <- [1..n]]

f5 0 = []
f5 1 = [1]
f5 n = a where a = ([1] ++ [i * a!!(i-1) | i<-[1..n]])

f6 0 = []
f6 n = [2^i | i<-[1..n]]

f7 0 = []
f7 1 = [1]
f7 n = a where a = ([1]++[(i+1)+a!!(i-1)|i<-[1..n-1]])

f8 0 = []
f8 1 = [1]
f8 n = a 
    where a = ([round (fromIntegral (3*i*i-i) / fromIntegral 2)|i<-[1..n]])

main = do
    print $ f1 0
    print $ f1 5
    print $ f2 5
    print $ f3 5
    print $ f4 5
    print $ f5 5
    print $ f6 5
    print $ f7 6
    print $ f8 5