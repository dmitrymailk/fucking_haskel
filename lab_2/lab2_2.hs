-- Определите следующие функции:
-- 1) Функция, принимающая на входе список вещественных чисел и
-- вычисляющую их арифметическое среднее. Постарайтесь, чтобы
-- функция осуществляла только один проход по списку.
-- sum - это функция, которая вычисляет сумму элементов списка
-- length - это функция, которая вычисляет длину списка
-- fromIntegral - это функция, которая преобразует целое число в вещественное
average :: [Double] -> Double
average nums = sum nums / fromIntegral (length nums)

-- 2) Функция вычленения n-го элемента из заданного списка.
-- !! - это оператор, который возвращает n-й элемент списка
-- nthElement :: Int -> [a] -> a
-- nthElement n xs = xs !! (n - 1)
nthElement :: Int -> [Int] -> Maybe Int
nthElement _ [] = Nothing
nthElement n (x:xs)
  | n == 0 = Just x
  | otherwise = nthElement (n-1) xs

-- 3) Функция сложения элементов двух списков. Возвращает список,
-- составленный из сумм элементов списков-параметров. Учесть,
-- что переданные списки могут быть разной длины.
-- zipWith - это функция, которая принимает на вход два списка и функцию, которая применяется к каждой паре элементов этих списков
-- и возвращает список, составленный из результатов применения функции к каждой паре элементов
-- (+) - функция, используемая в качестве передаваемой функции в zipWith для сложения элементов двух списков
sumElements :: [Int] -> ([Int] -> [Int])
sumElements xs ys = zipWith (+) xs ys

-- 4) Функция перестановки местами соседних четных и нечетных
-- элементов в заданном списке.
-- oddEvenSwap [] = [] - это случай, когда список пустой
-- oddEvenSwap [x] = [x] - это случай, когда список состоит из одного элемента
-- oddEvenSwap (x:y:xs) = y:x:oddEvenSwap xs - это случай, когда список состоит из двух элементов и более
-- в этом случае мы берем второй элемент списка, первый элемент списка, результат вызова функции oddEvenSwap для оставшегося списка
-- и возвращаем список, составленный из этих элементов
oddEvenSwap :: [Int] -> [Int]
oddEvenSwap [] = []
oddEvenSwap [x] = [x]
oddEvenSwap (x1:x2:xs) = x2:x1:oddEvenSwap xs

-- 5) Функция twopow n, которая вычисляет 2n, исходя из следую-
-- щих соображений. Пусть необходимо возвести 2 в степень n.
-- Если n четно, т.е. n = 2k, то 2n = 22k = (2k)2. Если n нечетно,
-- т.е. n = 2k + 1, то 2n = 22k+1 = 2 · (2k)2. Функция twopow не
-- должна использовать оператор ^ или любую функцию возведения
-- в степень из стандартной библиотеки. Количество рекурсивных
-- вызовов функции должно быть пропорционально log n.
-- div - это оператор целочисленного деления
-- в этом случае мы берем результат вызова функции twopow для n `div` 2, возводим его в квадрат и возвращаем результат
twopow :: Int -> Int
twopow 0 = 1
twopow n = 
    if even n then -- если n чётное
        a * a
    else
        2 * a * a
    where
        a = twopow $ n `div` 2


-- 6) Функция removeOdd, которая удаляет из
-- списка целых чисел все нечетные числа. Например:
-- removeOdd [1,4,5,6,10] должен возвращать [4,10].
-- filter - это функция, которая принимает на вход список и функцию, которая применяется к каждому элементу списка
-- и возвращает список, составленный из элементов, для которых функция вернула True
-- even - это функция, которая проверяет, является ли число четным
removeOdd :: [Int] -> [Int]
removeOdd xs = filter even xs

-- 7) Функция removeEmpty, которая удаляет пустые строки из
-- заданного списка строк. Например:
-- removeEmpty ["", "Hello", "", "", "World!"]
-- возвращает ["Hello","World!"].
-- filter - это функция, которая принимает на вход список и функцию, которая применяется к каждому элементу списка
-- и возвращает список, составленный из элементов, для которых функция вернула True
-- not . null - это функция, которая проверяет, является ли строка пустой
removeEmpty :: [String] -> [String]
removeEmpty xs = filter (not . null) xs


-- 8) Функция countTrue :: [Bool] -> Integer, возвращающая количество элементов списка, равных True.
-- toInteger - это функция, которая преобразует число типа Int в число типа Integer
-- length - это функция, которая возвращает количество элементов в списке
-- filter - это функция, которая принимает на вход список и функцию, которая применяется к каждому элементу списка
-- и возвращает список, составленный из элементов, для которых функция вернула True
-- (== True) - это функция, которая проверяет, является ли элемент равным True
-- $ это альтернатива скобочному вызову функции
countTrue :: [Bool] -> Integer
countTrue xs = toInteger $ length $ filter (== True) xs


-- 9) Функция makePositive, которая меняет знак всех отрицательных элементов
-- списка чисел, например: makePositive [-1, 0, 5, -10, -20] дает [1,0,5,10,20].
-- map - это функция, которая принимает на вход список и функцию, которая применяется к каждому элементу списка
-- и возвращает список, составленный из результатов применения функции к каждому элементу
-- abs - это функция, которая возвращает модуль числа
makePositive :: [Int] -> [Int]
makePositive xs = map abs xs

-- 10) Функция delete :: Char -> String -> String, кото-
-- рая принимает на вход строку и символ и возвращает
-- строку, в которой удалены все вхождения символа. При-
-- мер: delete ’l’ "Hello world!" должно возвращать "Heo word!".
-- filter - это функция, которая принимает на вход список и функцию, которая применяется к каждому элементу списка
-- и возвращает список, составленный из элементов, для которых функция вернула True
-- (/= c) - это функция, которая проверяет, не равен ли элемент символу c
delete :: Char -> String -> (String)
delete c xs = filter (/= c) xs

-- 11) Функция substitute :: Char -> Char -> String -> String,
-- которая заменяет в строке указанный символ на заданный. При-
-- мер: substitute ’e’ ’i’ "eigenvalue" возвращает "iiginvalui"
substitute :: Char -> Char -> String -> String
substitute oldChar newChar xs = map (\x -> if x == oldChar then newChar else x) xs

main = do
  print "1 Average"
  print (average [1, 2, 3, 4, 5])
  print "2 Nth Element"
  print (nthElement 3 [1, 2, 3, 4, 5])
  print "3 Sum Elements"
  print (sumElements [1, 2, 3, 4, 5] [1, 2, 3, 4, 5])
  print "4 Odd Even Swap"
  print (oddEvenSwap [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
  print "5 Twopow"
  print (twopow 10)
  print "6 Remove Odd"
  print (removeOdd [1, 4, 5, 6, 10])
  print "7 Remove Empty"
  print (removeEmpty ["", "Hello", "", "", "World!"])
  print "8 Count True"
  print (countTrue [True, False, True, True, False, False, True])
  print "9 Make Positive"
  print (makePositive [-1, 0, 5, -10, -20])
  print "10 Delete"
  print (delete 'l' "Hello world!")
  print "11 Substitute"
  print (substitute 'e' 'i' "eigenvalue")