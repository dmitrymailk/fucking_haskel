-- 1 Определите следующие функции с использованием функций выс-
-- шего порядка:

-- 1) Функция вычисления арифметического среднего элементов
-- списка вещественных чисел с использованием функции
-- foldr. Функция должна осуществлять только один проход
-- по списку.
mean :: [Double] -> Double
mean xs = (foldr (+) 0 xs) / fromIntegral (length xs)

-- 2) Функция, вычисляющая скалярное произведение двух списков
-- (используйте функции foldr и zipWith).
scalarProduct :: Num a => [a] -> [a] -> a
scalarProduct xs ys = foldr (+) 0 (zipWith (*) xs ys)

-- 3) Функция countEven, возвращающая количество четных эле-
-- ментов в списке.
-- length . filter even означает, что мы создаем новую функцию, которая применяет 
-- сначала функцию filter even к своему аргументу (что возвращает новый список, 
-- содержащий только четные элементы исходного списка), а затем функцию length к 
-- результату (что возвращает количество элементов этого нового списка).
countEven :: Integral a => [a] -> Int
countEven = length . filter even


-- 4) Функция quicksort, осуществляющая быструю сортировку
-- списка по следующему рекурсивному алгоритму. Для того,
-- чтобы отсортировать список xs, из него выбирается первый
-- элемент (обозначим его x). Остальной список делится на две
-- части: список, состоящий из элементов xs, меньших x и спи-
-- сок элементов, больших x. Эти списки сортируются (здесь
-- проявляется рекурсия, поскольку они сортируются этим же
-- алгоритмов), а затем из них составляется результирующий
-- список вида as ++ [x] ++ bs, где as и bs — отсортиро-
-- ванные списки меньших и больших элементов соответственно.
quicksort :: Ord a => [a] -> [a]
quicksort [] = []
quicksort (x:xs) = quicksort left ++ [x] ++ quicksort right
    where left = filter (< x) xs
          right = filter (>= x) xs

-- Первое уравнение quicksort [] = [] определяет базовый случай: пустой список уже отсортирован.

-- Второе уравнение quicksort (x:xs) = quicksort left ++ [x] ++ quicksort right определяет рекурсивный случай. 
-- Оно выбирает первый элемент x в списке, а затем разделяет список xs на две части: left содержит все элементы 
-- меньше x, а right содержит все элементы больше или равные x. Затем функция рекурсивно сортирует обе части и 
-- объединяет их с помощью оператора ++, чтобы получить отсортированный список.

-- Определение where left = filter (< x) xs используется для фильтрации списка xs, чтобы оставить только 
-- те элементы, которые меньше x, а right = filter (>= x) xs фильтрует список xs, чтобы оставить только 
-- те элементы, которые больше или равны x. Таким образом, left и right являются списками элементов, 
-- которые нужно отсортировать рекурсивно.

-- Когда функция quicksort вызывается с непустым списком xs, она продолжает рекурсивно разделять 
-- список и вызывать себя до тех пор, пока в списке не останется один элемент, который уже является 
-- отсортированным. Затем функция рекурсивно объединяет все части, используя оператор ++, чтобы 
-- получить отсортированный список.



-- 5) Определенная в предыдущем пункте функция quicksort
-- сортирует список в порядке возрастания. Обобщите ее: пусть
-- она принимает еще один аргумент — функцию сравнения типа
-- a -> a -> Bool и сортирует список в соответствие с нею.
quicksortCmp :: (a -> a -> Bool) -> [a] -> [a]
quicksortCmp _ [] = []
quicksortCmp cmp (x:xs) = quicksortCmp cmp left ++ [x] ++ quicksortCmp cmp right
    where
        left = filter (\y -> y `cmp` x) xs
        right = filter (\y -> not (y `cmp` x)) xs

main :: IO ()
main=do
	-- 1) Функция вычисления арифметического среднего элементов списка вещественных чисел
	print("mean")
	print(mean [1.0, 2.0, 3.0, 4.0]) -- результат: 2.5

	-- 2) Функция, вычисляющая скалярное произведение двух списков
	print("scalarProduct")
	print(scalarProduct [1, 2, 3] [4, 5, 6]) -- результат: 32
	
	-- 3) Функция countEven, возвращающая количество четных элементов в списке
	print("countEven")
	print(countEven [1, 2, 3, 4, 5]) -- результат: 2

	-- 4) Функция quicksort, осуществляющая быструю сортировку списка
	print("quicksort")
	print(quicksort [5, 2, 7, 3, 9, 1, 6]) -- результат: [1, 2, 3, 5, 6, 7, 9]

	-- 5) Функция quicksort', обобщенная быстрая сортировка списка по заданному порядку
	print("quicksortCmp")
	let xs = [("b", 2), ("a", 1), ("c", 3)]
	print(quicksortCmp (>) xs) -- результат: [("a", 1), ("b", 2), ("c", 3)]

